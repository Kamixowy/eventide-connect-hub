
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mytipitigarmiiryljns.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15dGlwaXRpZ2FybWlpcnlsam5zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1OTk5MjcsImV4cCI6MjA1OTE3NTkyN30.txoDe3cCm5sEmI-mxho6Q5YqNk-wEUiswjGKbjK2bSQ";

// Create the Supabase client with auth configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    flowType: 'pkce',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Function to check if Supabase is properly configured
export const isSupabaseConfigured = () => {
  // Use type casting to avoid TypeScript literal type errors
  const defaultUrl = "https://xyzcompany.supabase.co" as string;
  const defaultKey = "public-anon-key" as string;
  
  return SUPABASE_URL !== defaultUrl && 
         SUPABASE_PUBLISHABLE_KEY !== defaultKey;
};

// Enable realtime for direct_conversations, direct_messages, and conversation_participants tables
export const enableMessagingRealtime = async () => {
  try {
    // Check if realtime is already enabled
    const { data: realtimeEnabled, error: checkError } = await supabase.rpc('check_column_exists', { 
      table_name: 'direct_conversations',
      column_name: 'id'
    });

    if (checkError) {
      console.error('Error checking if realtime is enabled:', checkError);
      return;
    }
    
    if (realtimeEnabled) {
      console.log('Messaging tables are ready for realtime');
    } else {
      console.warn('Messaging tables might not be properly set up for realtime. Please check your database setup.');
    }
  } catch (error) {
    console.error('Error enabling realtime for messaging:', error);
  }
};

// SQL to run after connecting to Supabase:
/*
-- Ensure the storage bucket exists
insert into storage.buckets (id, name, public)
values ('organizations', 'organizations', true) 
on conflict do nothing;

-- Ensure organizations table has the required fields
alter table organizations add column if not exists category text;
alter table organizations add column if not exists achievements text[];
*/
